from dataclasses import dataclass, field
from datetime import datetime as dt


'''
These are prototypes.  Defaults values, labels or properties are indicative.
You can change them to anything you like but respect the formats. 
Keep in mind that labels are str or int values,
but properties give the keys.  Their values are defined when 
we use a dataclass to create a node or a relationship. 
'''

@dataclass
class NodeProperties:

    labels: str = ('JP')  # use tuples even with 1 element for consistency
    properties: dict = field(default_factory={'text', 'timestamp'})

    def __post_init__(self):
        '''
        Executed after initialization
        :return: timestamp is set in place
        '''
        if 'timestamp' in self.properties:
            self.properties['timestamp'] = str(dt.now())

@dataclass
class Constraints:
    ''' This dataclass stores constraints to be used by a specific node or relation
    '''
    labels_constraints: str = tuple() # = ('JP',)
    # the constraints on properties will become a dictionary automatically in the class
    # here, we only need to say which properties we place a constraint on
    # make sure to have those keys in the properties as well, or error
    properties_constraints: str = tuple() # = ('user_id', 'display_name')

@dataclass
class NewUser(Constraints):
    ''' Let's define nodes properties with dataclasses to keep the Graph class as simple as possible '''

    labels = ('JP',)  # add as many labels as necessary in the tuple

    # field(default_factory necessary because a dict is mutable
    # and dataclass wants immutable default values
    # anyway, those keys are for show because one could use totally different ones
    properties: dict = field(default_factory={'user_id',
                                              'display_name',
                                              'password_hash',
                                              'creation_date',
                                              'last_session',
                                              'timestamp'})

    # Since the labels default is specified, we can create such class with
    # NewUser(properties={'user_id':'123', 'display_name': 'JP', 'password_hash':123})

    def __post_init__(self):
        '''
        Executed after initialization.
        Be careful not to delete if you modify the properties.
        :return: timestamp is set in place
        '''
        if 'timestamp' in self.properties:
            self.properties['timestamp'] = str(dt.now())


@dataclass
class Question(NodeProperties, Constraints):
    ''' This dataclass stores the question to the user generated by NLP
        We inherit properties from dataclass NodeProperties
    '''
    # here I decide to put the user_id as a label, but it could also be a property
    labels: str = ('JP', 'Question')

    # user can create new constraints, for instance or set them by code later
    labels_constraints = ('JP', 'Question')
    properties_constraints: str = ('text',)


@dataclass
class Answer(NodeProperties, Constraints):
    ''' This dataclass stores the question to the user generated by NLP
    '''
    labels: str = ('JP', 'Answer')


@dataclass
class Transcripts(NodeProperties):
    ''' This dataclass stores a whole conversation '''
    labels: str = ('JP', 'Transcripts')

    labels_constraints = ('JP', 'Transcripts')
    properties_constraints: str = ('text',)


@dataclass
class LinguisticImage(NodeProperties, Constraints):
    ''' This dataclass stores the linguistic images generated from a user's answer '''
    labels: str = ('JP', 'LinguisticImage')


@dataclass
class Theme(NodeProperties, Constraints):
    ''' This dataclass stores the theme generated from a user's answer(s)
        It can be created at any moment, and will be linked to an answer
    '''
    labels: str = ('JP', 'Theme')


@dataclass
class Utters(Constraints):
    ''' This dataclass stores the relationship used between Question and Answer nodes '''
    labels: str = 'UTTERS'
    properties: dict = field(default_factory={})


@dataclass
class HasImagery(Constraints):
    ''' This dataclass stores the relationship to LinguisticImage nodes '''
    labels: str = 'HAS IMAGERY'
    properties: dict = field(default_factory={})


@dataclass
class HasTheme(Constraints):
    ''' This dataclass stores the relationship to Theme nodes '''
    labels: str = 'HAS THEME'
    properties: dict = field(default_factory={})
